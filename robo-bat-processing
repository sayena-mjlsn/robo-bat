//import processing.sound.*;
import processing.serial.*;
//Begin JonF Code
// We communicate with the Arduino via the serial port
Serial _serialPort;

// Our serial port index (this will change depending on your computer)
final int ARDUINO_SERIAL_PORT_INDEX = 7; 
int _xPos = max(0,800);
float _currentDist = 0.0; // in cm
final int MAX_SENSOR_VAL = 400; // in cm

float x = 1114;
float y = 64;
float w = 150;
float h = 80;
float x1;
float easing = 0.05;

float xpos, ypos;    // Starting position of shape    

float xspeed = 2.8;  // Speed of the shape
float yspeed = 2.2;  // Speed of the shape

int xdirection = 1;  // Left or Right
int ydirection = 1;  // Top to Bottom


float [] BatX = new float[6]; // 'x' value of bat images
float [] BatY = new float[6]; // 'y' value of bat images

float [] signalX = new float[100]; // 'x' value of bat images
//float [] BatY = new float[6]; // 'y' value of bat images

float Height;
float Angle;
int Distance_1;

float x2 = 300;
float y2 = 70;
float w2 = 150;
float h2 = 80;
float value = 0.0;
boolean hiddenval = false;
boolean toggle = false; //off

String inString = null;
int CountFrame = 6;
boolean flag = true;
boolean paused = false;
boolean sent = false;

PImage img;
PImage[] bat = new PImage[8];
PImage apple;
PImage apple2;
PImage bg; //end JonF Code
PImage Play;
PImage Pause;
PImage Ruler;
PImage Pointer;
PImage Bat;
PImage Batman;
PImage Mouse;
PImage hiddenmouse;
PImage sadbat;
PImage Signal;
PImage SentSignal;
PImage RecSignal;
PImage playtext;
PImage pausetext;
PImage toggleOff;
PImage toggleOn;
PImage pausecue;
PImage pausedrec;

PFont f;


  //SoundFile file;
  //put your audio file name here
  String batsound = "BatSounds.mp3";
  String path;

void setup(){
  size(1200, 800);
  //fullScreen();
  
   for (int i = 1; i <= 5; i = i+1) {
        BatX[i]=random(1000);
        BatY[i]=random(600);
    }
  
  
  // Open the serial port
  _serialPort = new Serial(this, Serial.list()[ARDUINO_SERIAL_PORT_INDEX], 9600);
  //background
   bg = loadImage("bg-1.png");
   
  smooth(); //code syntax via Proccesing.org
  img = loadImage( "bat_gif.gif" );
  bat[0] = loadImage( "batgif1.png" );
  bat[1] = loadImage( "batgif2.png" );
  bat[2] = loadImage( "batgif4.png" );
  bat[3] = loadImage( "batgif5.png" );
  bat[4] = loadImage( "batgif7.png" );
  bat[5] = loadImage( "batgif8.png" );
  bat[6] = loadImage( "batgif9.png" );
  frameRate( 60 ); //default 60
  smooth();
  
  apple = loadImage("apple.png"); //apple load
  apple2 = loadImage("apple2.png"); //apple2 load
  
  Play = loadImage ("play.png");
  Pause = loadImage ("pause.png");
  Ruler = loadImage ("rulerr.jpg");
  Pointer = loadImage ("pointer.png");
  Bat = loadImage("bat.png");
  Batman = loadImage("bat-1.png");
  Mouse = loadImage("mouse-2.png");
  hiddenmouse = loadImage("hidden-mouse.png");
  sadbat = loadImage("sad-bat.png");
  Signal = loadImage("signal.png");
  SentSignal = loadImage("signa-1.png");
  RecSignal = loadImage("signa-rec.png");
  f = createFont("AvenirLTStd-Book",16,true); // via Processing.org
  //f = loadFont("AvenirLTStd-Book.otf");
  textFont(f, 32);
  playtext = loadImage("play-text.png");
  pausetext = loadImage("pause-text.png");
  toggleOff = loadImage("toggle-off.png");
  toggleOn = loadImage("toggle-on.png");
  pausecue = loadImage("paused.png");
  pausedrec = loadImage("rec-paused.png");
  
}

void draw(){
  //fullScreen();
  background(bg);
  //image(Signal,121,324, 20 ,19); 
  //update(mouseX, mouseY);
  //if( key==' ') { 
  //if (paused){
  //  paused = false;
  //  println(paused);
  //  delay(10);
  //}
  //else{
  //  paused = true;
  //  delay(10);
  //}
    
  //}
  
  //signal
  
  
  
  
  
  
  
  
  
  //keyPressed();
  Angle = 70;  
    if (Height < 0) { // to limit the appearance of bats to the size of screen
        Height=0;
    }
    if (Height > 800) {  // to limit the appearance of bats to the size of screen
        Height=800;
    }
    
    for  (int i = 1; i <= 5; i = i+1) {    // generate bats on the screen randomly
        BatX[i] = BatX[i] - cos(radians(Angle))*(10+2*i);
        //BatX[i] = lerp(BatX[i], value, 0.05);
        noTint();
        image(Bat, BatX[i]-50, BatY[i]-100, 150, 52);  
        
        if (BatX[i] < -300) {
            BatX[i]=1000;
            BatY[i] = random(600);
           BatY[i] = BatY[i] - cos(radians(Angle-_currentDist))*(10+2*i);
           //BatY[i] = lerp(BatY[i], 560, 0.05);
        }
        
  //for  (int y = 1; y <= 5; y = y+1) {    // generate bats on the screen randomly
  //      signalX[y] = signalX[i] - cos(radians(100))*(10+2*y);
  //      //BatX[i] = lerp(BatX[i], value, 0.05);
  //      //noTint();
  //      image(SentSignal, signalX[y]+100, 450, 30, 75);  
        
  //      if (signalX[y] < -300) {
  //          signalX[y]=1000;
           
  //         //BatY[i] = lerp(BatY[i], 560, 0.05);
  //      }
  //}

  
  
  //image(Ruler,300,450, 700,80); //300,450
  value = map(_currentDist, 0, 10, 182 , 900); 
  
   //easing
   //float dx = value - x1;
   //x1 += dx * easing;
   x1 = lerp(x1, value, 0.05);
   //redraw();
   //delay(100);
  // x1 = value; //backup
   
   //value
  if(mousePressed){
  if(mouseX>105 && mouseX <105+54 && mouseY>306 && mouseY <306+54){
    sent = true;
    if (sent){
   println("signal sent");
   //fill(0);
   //flag = false; //TEST
   
   signal();
   //CountFrame = 0;
   //for (int i1 = 1; i1 <= 5; i1++) {
   //      signalX[i1]=  220;
       
   // }
  // for  (int y = 1; y <= 5; y = y+1) {    // generate bats on the screen randomly
  //      signalX[y] = signalX[i] - cos(radians(100))*(10+2*y);
  //      //BatX[i] = lerp(BatX[i], value, 0.05);
  //      //noTint();
  //      image(SentSignal, 250+signalX[y]+100, 450, 30, 75);  
        
  //      if (signalX[y] < -300) {
  //          signalX[y]=300;
           
  //         //BatY[i] = lerp(BatY[i], 560, 0.05);
  //      }
        
  //      if (signalX[y] >= 600) {
  //          signalX[y]=;
           
  //         //BatY[i] = lerp(BatY[i], 560, 0.05);
  //      }
        
  //      flag = false;
  // CountFrame = 0;
  //}

  //int z = 220;
  //while ( z <= value - 100){
  //  image(SentSignal, z, 431, 34, 83); 
  //  //image(SentSignal, 600, 431, 34, 83); 
  //  //delay (20);
  //  z+=50;
  //  redraw();
  //}
   
   //for ( int z = 220 ; z<= value-100 ; z+= 50){   
   //  if ( value >= 1000){
   //    value = 880;
   //  }
     
      
     
   //  println(value);
   //  image(SentSignal, z, 431, 34, 83); 
   //  //delay(2000);
   // }
   // //RecSignal
    
   // if ( _currentDist <= 10){
   // for ( int z = int(value)-150 ; z>= 200 ; z-= 50){   
    
   //  println(value);
   //  image(RecSignal, z, 531, 34, 83); 
   //  //delay(2000);
   // }
   // }
   // delay(10);
   //paused = true;
   //flag = true;
   //CountFrame = 0;
   //delay(30);
   //generateText(255,255,255);
    }
 } 
  }
   
 if (!paused){ 
 image(Pause,x,y, 21 ,21); 
 image(pausetext,x-8,117, 40 ,21); 
 //fill(255);
 if(mousePressed){
  if(mouseX>x && mouseX <x+54 && mouseY>y && mouseY <y+54){
   println("The mouse is pressed and over the button");
   //fill(0);
   paused = true;
   flag = false;
   //CountFrame = 0;
   delay(30);
   generateText(255,255,255);
   //frameRate( 60 );
   
  }
 } 
 }
 
 else {
 image(Play,x+2,y, 21 ,21); 
 image(playtext,x-5,117, 37 ,21); 
  image(pausedrec,964,670, 162.39 ,66);
  
 //stroke (255,255,255);
 //fill(#061621);
 //rect(value-80, 535, 150  , 40, 80);
 //generateText(255,255,255);
 //fill(255);
 if(mousePressed){
  if(mouseX>x && mouseX <x+54 && mouseY>y && mouseY <y+54){
   println("The mouse is pressed and over the button");
   //fill(0);
   paused = false;
   flag = true;
   CountFrame = 6;
   delay(30);
   //frameRate( 0 );
  }
 } 
 }
 
 
 //toggle
  if (!toggle){ //toggle off
 image(toggleOff,921,48, 106 ,54); 
 
 //fill(255);
 if(mousePressed){
  if(mouseX>921 && mouseX <921+106 && mouseY>48 && mouseY <48+54){
   println("The mouse is pressed and over the button");
   //fill(0);
   toggle = true;
   //flag = false;
   //CountFrame = 0;
   delay(30);
   //generateText(255,255,255);
   //frameRate( 60 );
   
  }
 } 
 }
 
 else {
   image(toggleOn,921,48, 108 ,57); 
 if(mousePressed){
  if(mouseX>921 && mouseX <921+106 && mouseY>48 && mouseY <48+54){
   println("The mouse is pressed and over the button");
   //fill(0);
   toggle = false;
   //flag = true;
   //CountFrame = 6;
   delay(30);
   //frameRate( 0 );
  }
 } 
 }
 
 //toggle end
 
   textSize(23);
   //fill(0, 0 ,0);
   //text(inString +" inches", 30,40); 
  
  //int xPos = 400;
  //int yPos = 300;
  //float maxBarWidth = width - xPos;
  //xpos = 42;
  // xpos = xpos + ( xspeed * xdirection );
  //ypos = height/2;
  if (!hiddenval){
  image(Pointer,x1,600, 16,14); //value-5
  //mouse
   image(Mouse,x1-55,467, 123,117);
   image(Batman,42,391, 174,191); 
  }
  else
  {
    //image(hiddenmouse,750,467, 123,117);
    image(sadbat,42,238, 339,344);
  }
  
  if (toggle){
    signal();
  }
  //image(Bat,x1-75,350, 150,75); //bat moving with pointer
  //image(apple,value,300, 100,100); 
  //fill(0, 0 ,0);
  generateText(255,255,255);
  //text(_currentDist +" inches",value,555); 
  
  //Bat animation
  //image(Bat, 0, 200); //call batgif from setup image - value-200
  //image(Batman,24,391, 174,191); 
                                                                                               

  println(_currentDist);
    }
}
//Jon F class Code
/**
* Called automatically when new data is received over the serial port. 
*/
void serialEvent (Serial _serialPort) {
  if(flag){
  try {
    // Grab the data off the serial port. See: 
    // https://processing.org/reference/libraries/serial/index.html

    inString = trim(_serialPort.readStringUntil('\n'));
    
    if(inString != null){
      _currentDist = float(inString);// convert to a float
      //rawdistance = _currentDist;
      //_inLength = _serialPort.readStringUntil(",");
      println(inString);
      if (_currentDist >= 9 && _currentDist <12){
        //hiddenval = _currentDist;
        _currentDist = 9;
        
        //opacity thing
      }
      
      if (_currentDist <= 0){
        _currentDist = 0;
        
      }
      
       if (_currentDist >= 12){
              //hiddenval = _currentDist;
          
              hiddenval = true;
              
             // _currentDist = ;
              //opacity thing
            }
         if (_currentDist <= 12 && _currentDist >= 0){
             
              hiddenval = false;
              //opacity thing
            }
      //value = int(map(float(inString), 0, 401, 0 , 16)); 
    }
    
  }
  catch(Exception e) {
    println(e);
  }
  }
}

void generateText(int r, int g, int b){
  fill(r,g,b);
  //println("color"+r);
  //text(_currentDist +" inches",x1-50,560);
  //fill(21,45,62);
  
  if (_currentDist >= 12){
              //hiddenval = _currentDist;
             // fill(250,107,107);
             fill(21,45,62);fill(21,45,62);
          text("...",1035,705);
              
              //opacity thing
            }
            
        else{
         fill(21,45,62);
        text(_currentDist +" inches",978,709);
        }
}

void keyPressed()
{
   if( key==' ') { 
  //if (paused){
  //  paused = false;
  //  //paused = false;
  // flag = true;
  // CountFrame = 6;
  // delay(30);
  //}
  //else{
  //  paused = true;
  //  flag = false;
  // CountFrame = 0;
  // delay(30);
  // generateText(255,255,255);
  //}
    signal();
  }
}


void signal(){
  //flag = true;
 // frameRate(60);
  float size = 0.1;
  int fixedheight = 431;
  boolean loop = true;
  
  
  for ( int z = 180 ; z<= value-100 ;){   
    
     if (value >= 1000){
        z+=50;
        loop = false;
        
      }
      else{
        z+=35;
      }
      
      //delay(30);
      
    size = size + 0.1;
     //println(value);
     image(SentSignal, z, fixedheight+=1, 34*size, 83*size); 
     println(z);
     //delay(100);
     if ( z>=1100){
       break;
     }
  
    }
    //delay(10);
    //RecSignal
    if (loop){
    size = 0.2;
    int fixedheight1 = 570;
    if ( _currentDist <= 9){
    for ( int z = int(value)-100 ; z>= 160 ; z-=40){  
     
    size = size + 0.2;
     println("here "+z);
     image(RecSignal, z, fixedheight1-=7, 25*size, 63*size); 
     //delay(2000);
     if (z<100){
       break;
     }
     
    }
    }
}
    
   // paused = false;
   //flag = true;
   //CountFrame = 6;
   //delay(30);
   
    //delay(10);
    //flag = true;
    
  }
  
  void update(int x, int y) {
  if( over(105, 306, 54, 54) ) {
    signal();
  } 
  
}

boolean over(int x, int y, int width, int height) {
  if (mouseX >= x && mouseX <= x+width && 
      mouseY >= y && mouseY <= y+height) {
    return true;
  } else {
    return false;
  }
}
